-- Supprimer les tables si elles existent déjà
-- Supprimer les tables dans l'ordre correct
DROP TABLE IF EXISTS ams_vente CASCADE;
DROP TABLE IF EXISTS ams_lotachat CASCADE;
DROP TABLE IF EXISTS ams_contrat CASCADE;
DROP TABLE IF EXISTS ams_produit_categorie CASCADE;
DROP TABLE IF EXISTS ams_produit CASCADE;
DROP TABLE IF EXISTS ams_fournisseur_contact CASCADE;
DROP TABLE IF EXISTS ams_fournisseur CASCADE;
DROP TABLE IF EXISTS ams_contact CASCADE;

-- Table ams_contact
CREATE TABLE ams_contact
(
    idcontact INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom       VARCHAR(100) NOT NULL,
    prenom    VARCHAR(100) NOT NULL,
    fonction  VARCHAR(100),
    tel       VARCHAR(20),
    email     VARCHAR(150) NOT NULL
);

-- Table ams_fournisseur
CREATE TABLE ams_fournisseur
(
    numsiret    INT PRIMARY KEY,
    nom_societe VARCHAR(150) NOT NULL,
    adresse     TEXT         NOT NULL,
    email       VARCHAR(150) NOT NULL
);

-- Table ams_fournisseur_contact
CREATE TABLE ams_fournisseur_contact
(
    idfournisseur INT NOT NULL,
    idcontact     INT NOT NULL,
    CONSTRAINT unique_contact_per_fournisseur UNIQUE (idfournisseur, idcontact),
    FOREIGN KEY (idcontact) REFERENCES ams_contact (idcontact),
    FOREIGN KEY (idfournisseur) REFERENCES ams_fournisseur (numsiret)
);

-- Table ams_produit
CREATE TABLE ams_produit
(
    idproduit       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom             VARCHAR(15)    NOT NULL,
    prixventeactuel NUMERIC(10, 2) NOT NULL,
    mesure          VARCHAR(10),
    description     VARCHAR(250)
);

-- Table ams_produit_categorie
CREATE TABLE ams_produit_categorie
(
    idproduit INT         NOT NULL,
    categorie VARCHAR(25) NOT NULL,
    CONSTRAINT unique_category_per_produit UNIQUE (idproduit, categorie),
    FOREIGN KEY (idproduit) REFERENCES ams_produit (idproduit)
);

-- Table ams_contrat
CREATE TABLE ams_contrat
(
    idcontrat     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idproduit     INT            NOT NULL,
    idfournisseur INT            NOT NULL,
    quantitemin   NUMERIC(10, 2) NOT NULL,
    datedebut     DATE           NOT NULL,
    datefin       DATE           NOT NULL,
    prixfixe      NUMERIC(10, 2) NOT NULL,
    FOREIGN KEY (idproduit) REFERENCES ams_produit (idproduit),
    FOREIGN KEY (idfournisseur) REFERENCES ams_fournisseur (numsiret)
);

-- Table ams_lotachat
CREATE TABLE ams_lotachat
(
    idlotachat     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idcontrat      INT            NOT NULL,
    quantite       NUMERIC(10, 2) NOT NULL,
    dateachat      DATE           NOT NULL,
    dateperemption DATE,
    FOREIGN KEY (idcontrat) REFERENCES ams_contrat (idcontrat)
);

-- Table ams_vente
CREATE TABLE ams_vente
(
    idvente      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idlotachat   INT            NOT NULL,
    prixdumoment NUMERIC(10, 2) NOT NULL,
    datevente    DATE           NOT NULL,
    quantite     NUMERIC(10, 2) NOT NULL,
    FOREIGN KEY (idlotachat) REFERENCES ams_lotachat (idlotachat)
);

-- Insérer des exemples dans la base de données

-- Insérer un produit dans ams_produit et récupérer son ID
WITH new_product AS (
INSERT
INTO ams_produit (nom, prixventeactuel, mesure, description)
VALUES ('reference', 1, 'U', 'null')
    RETURNING idproduit
    )
-- Insérer les catégories associées à ce produit
INSERT
INTO ams_produit_categorie (idproduit, categorie)
SELECT idproduit, 'soda'
FROM new_product
UNION ALL
SELECT idproduit, 'cosmétiques'
FROM new_product;

-- Insérer des données dans les tables
-- 1. Insérer un contact
INSERT INTO ams_contact (nom, prenom, fonction, tel, email)
VALUES ('Durand', 'Marie', 'Responsable Achats', '0612345678', 'marie.durand@example.com') RETURNING idcontact;

-- 2. Insérer un fournisseur
INSERT INTO ams_fournisseur (numsiret, nom_societe, adresse, email)
VALUES (123456789, 'Société ABC', '123 Rue Principale, Paris', 'contact@abc.com');

-- 3. Associer le contact au fournisseur
INSERT INTO ams_fournisseur_contact (idfournisseur, idcontact)
VALUES (123456789, 1);

-- 4. Insérer un produit
INSERT INTO ams_produit (nom, prixventeactuel, mesure, description)
VALUES ('Coca-Cola', 1.50, 'L', 'Boisson gazeuse rafraîchissante') RETURNING idproduit;

-- 5. Associer des catégories au produit
INSERT INTO ams_produit_categorie (idproduit, categorie)
VALUES (2, 'soda');

-- 6. Créer un contrat
INSERT INTO ams_contrat (idproduit, idfournisseur, quantitemin, datedebut, datefin, prixfixe)
VALUES (2, 123456789, 100, '2024-01-01', '2025-12-31', 1.20) RETURNING idcontrat;

-- 7. Insérer un lot d'achat
INSERT INTO ams_lotachat (idcontrat, quantite, dateachat, dateperemption)
VALUES (1, 200, '2024-02-15', '2025-02-15') RETURNING idlotachat;

-- 8. Enregistrer une vente
INSERT INTO ams_vente (idlotachat, prixdumoment, datevente, quantite)
VALUES (1, 1.50, '2024-12-15', 50);